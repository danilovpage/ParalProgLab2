#include <iostream>
#include <fstream>
#include <omp.h>
#include <string>

using namespace std;

int** read_array(const char* path) //прочитать матрицу
{
	ifstream fin;
	fin.open(path);
	int row, col = 0;
	fin >> row >> col;
	if (!fin || row == 0 || col == 0)
	{
		cout << "Bad file" << endl;
	}

	int** A = new int* [row];
	for (int i = 0; i < row; i++)
	{
		A[i] = new int[col];
	}

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			fin >> A[i][j];
		}
	}
	fin.close();
	return A;
}

int main()
{
	setlocale(LC_ALL, "Rus");
	const char* path_1 = "/home/2020-02809/1.txt";
	const char* path_2 = "/home/2020-02809/2.txt";
	int** A = read_array(path_1);
	int** B = read_array(path_2);
  
	ifstream fin1;
	fin1.open(path_1);
	int n, m = 0;
	fin1 >> n >> m;
	fin1.close();
	int row1 = n;
	int col1 = m;

	ifstream fin2;
	fin2.open(path_2);
	fin2 >> n >> m;
	fin2.close();
	int row2 = n;
	int col2 = m;

	if (col1 != row2)
	{
		cout << " Умножение невозможно! ";
		cin.get();
		return 0;
	}


	clock_t start;
	start = clock();
	double wtime = omp_get_wtime();

	int** C = new int* [row1];
	for (int i = 0; i < row1; i++)
	{
		C[i] = new int[col2];
	}
	int threads;
#pragma omp parallel shared(threads)
	{
		threads = omp_get_num_threads();
		//cout << threads << endl;

#pragma for
		for (int i = 0; i < col2; i++)
		{
			for (int j = 0; j < col2; j++)
			{
				C[i][j] = 0;
				for (int k = 0; k < col1; k++)
					C[i][j] += A[i][k] * B[k][j];
			}
		}

	}
	wtime = omp_get_wtime() - wtime;
	cout << "Elapsed omp time: " << wtime << " seconds" << endl;
	cout << endl << "Num of threads: " << threads << endl << "Calculation time: " << double(clock() - start) / CLOCKS_PER_SEC << " seconds" << endl;

	ofstream fout;
	fout.open("/home/2020-02809/res.txt");
	if (fout.is_open())
	{
		fout << "Время: " << double(clock() - start / CLOCKS_PER_SEC) << "мс" << "\n" << "Размер результирующей матрицы: [" << row1 << "," << col2 << "]" << endl;
		for (int i = 0; i < row1; i++)
		{
			for (int j = 0; j < col2; j++)
			{
				fout << C[i][j] << " ";
			}
			fout << "\n";
		}
	}
	fout.close();
	

	return 0;
}
